stages:
  - build
  - test
  - docker
  - deploy

build:
  stage: build
  image: node:13
  cache:
    paths:
      - node_modules
      - build
  artifacts:
    paths:
      - node_modules
      - build
  script:
    - npm install
    - npm run build

test:
  stage: test
  image: node:13
  script:
    - npm run test

docker:
  stage: docker
  image: docker:latest
  services:
  - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag $CI_REGISTRY/simonbreiter/color-name:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY/simonbreiter/color-name:latest .
    - docker push $CI_REGISTRY/simonbreiter/color-name:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY/simonbreiter/color-name:latest

docker:arm64:
  image: jonoh/docker-buildx-qemu
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # Use docker-container driver to allow useful features (push/multi-platform)
    - docker buildx create --driver docker-container --use
    - docker buildx inspect --bootstrap
  script:
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    - docker buildx build --platform linux/arm/v7,local --pull -t $CI_REGISTRY/simonbreiter/color-name:$CI_COMMIT_SHORT_SHA-arm64 --push .
    - docker push $CI_REGISTRY/simonbreiter/color-name:$CI_COMMIT_SHORT_SHA-arm64

#deploy:
#  stage: deploy
#  image: dtzar/helm-kubectl
#  script:
#    - kubectl config set-cluster k8s --server="${K8S_API_URL}"
#    - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CA_CERTIFICATE}
#    - kubectl config set-credentials gitlab --token="${K8S_TOKEN}"
#    - kubectl config set-context default --cluster=k8s --user=gitlab
#    - kubectl config use-context default
#    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" k8s/deployment.yml
#    - kubectl apply -k ./k8s
